"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([[81723],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:n},e.children)}},75842:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"scripting/functions/BlockIpAddress","title":"BlockIpAddress","description":"Blocks an IP address from further communication with the server for a set amount of time (with wildcards allowed).","source":"@site/docs/scripting/functions/BlockIpAddress.md","sourceDirName":"scripting/functions","slug":"/scripting/functions/BlockIpAddress","permalink":"/ru/docs/scripting/functions/BlockIpAddress","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/tree/master/frontend/docs/scripting/functions/BlockIpAddress.md","tags":[{"inline":true,"label":"ip address","permalink":"/ru/docs/tags/ip-address"}],"version":"current","frontMatter":{"title":"BlockIpAddress","sidebar_label":"BlockIpAddress","description":"Blocks an IP address from further communication with the server for a set amount of time (with wildcards allowed).","tags":["ip address"]},"sidebar":"docsSidebar","previous":{"title":"BeginPlayerObjectEditing","permalink":"/ru/docs/scripting/functions/BeginPlayerObjectEditing"},"next":{"title":"CallLocalFunction","permalink":"/ru/docs/scripting/functions/CallLocalFunction"}}');var i=s(74848),r=s(28453);const c={title:"BlockIpAddress",sidebar_label:"BlockIpAddress",description:"Blocks an IP address from further communication with the server for a set amount of time (with wildcards allowed).",tags:["ip address"]},l=void 0,o={},d=[{value:"Description",id:"description",level:2},{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2},{value:"Notes",id:"notes",level:2},{value:"Related Functions",id:"related-functions",level:2},{value:"Related Callbacks",id:"related-callbacks",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:'Blocks an IP address from further communication with the server for a set amount of time (with wildcards allowed). Players trying to connect to the server with a blocked IP address will receive the generic "You are banned from this server." message. Players that are online on the specified IP before the block will timeout after a few seconds and, upon reconnect, will receive the same message.'}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"const ipAddress[]"}),(0,i.jsx)(n.td,{children:"The IP to block."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"timeMS"}),(0,i.jsx)(n.td,{children:"The time (in milliseconds) that the connection will be blocked for. 0 can be used for an indefinite block."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"This function does not return any specific values."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"public OnRconLoginAttempt(ip[], password[], success)\n{\n    if (!success) // if they supplied a bad password\n    {\n        BlockIpAddress(ip, 60 * 1000); // block the connections from this ip for one minute\n    }\n    return 1;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Wildcards can be used with this function, for example blocking the IP '6.9.",(0,i.jsx)(n.em,{children:"."}),"' will block all IPs where the first two octets are 6 and 9 respectively. Any number can be in place of an asterisk."]})}),"\n",(0,i.jsx)(n.h2,{id:"related-functions",children:"Related Functions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"UnBlockIpAddress",children:"UnBlockIpAddress"}),": Unblock an IP that was previously blocked."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"IsBanned",children:"IsBanned"}),": Checks if the given IP address is banned."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-callbacks",children:"Related Callbacks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../callbacks/OnRconLoginAttempt",children:"OnRconLoginAttempt"}),": Called when someone attempts to log in to RCON in-game."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../callbacks/OnIncomingConnection",children:"OnIncomingConnection"}),": Called when a player is attempting to connect to the server."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);