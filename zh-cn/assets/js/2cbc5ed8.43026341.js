"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([[49157],{4069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"scripting/functions/GetPlayerKeys","title":"GetPlayerKeys","description":"Check which keys a player is pressing.","source":"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/scripting/functions/GetPlayerKeys.md","sourceDirName":"scripting/functions","slug":"/scripting/functions/GetPlayerKeys","permalink":"/zh-cn/docs/scripting/functions/GetPlayerKeys","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/tree/master/frontend/docs/scripting/functions/GetPlayerKeys.md","tags":[{"inline":true,"label":"player","permalink":"/zh-cn/docs/tags/player"}],"version":"current","frontMatter":{"title":"GetPlayerKeys","sidebar_label":"GetPlayerKeys","description":"Check which keys a player is pressing.","tags":["player"]},"sidebar":"docsSidebar","previous":{"title":"GetPlayerIp","permalink":"/zh-cn/docs/scripting/functions/GetPlayerIp"},"next":{"title":"GetPlayerLandingGearState","permalink":"/zh-cn/docs/scripting/functions/GetPlayerLandingGearState"}}');var i=t(74848),r=t(28453);const l={title:"GetPlayerKeys",sidebar_label:"GetPlayerKeys",description:"Check which keys a player is pressing.",tags:["player"]},a=void 0,c={},d=[{value:"Description",id:"description",level:2},{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2},{value:"Notes",id:"notes",level:2},{value:"Related Resources",id:"related-resources",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Check which keys a player is pressing."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"playerid"}),(0,i.jsx)(n.td,{children:"The ID of the player to get the keys of."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["&KEY",":keys"]}),(0,i.jsxs)(n.td,{children:["A set of bits containing the player's key states. This value is what is called a bit mask. ",(0,i.jsx)(n.a,{href:"../resources/keys",children:"Click here"})," for a list of keys."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"updown"}),(0,i.jsx)(n.td,{children:"Up/down state."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"leftright"}),(0,i.jsx)(n.td,{children:"Left/right state."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:"The keys are stored in the specified variables."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'public OnPlayerUpdate(playerid)\n{\n    new\n        KEY:keys, updown, leftright;\n\n    GetPlayerKeys(playerid, keys, updown, leftright);\n\n    if (updown == KEY_UP)\n    {\n        SendClientMessage(playerid, -1, "UP");\n    }\n    else if (updown == KEY_DOWN)\n    {\n        SendClientMessage(playerid, -1, "DOWN");\n    }\n\n    if (leftright == KEY_LEFT)\n    {\n        SendClientMessage(playerid, -1, "LEFT");\n    }\n    else if (leftright == KEY_RIGHT)\n    {\n        SendClientMessage(playerid, -1, "RIGHT");\n    }\n\n    return 1;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"Only the FUNCTION of keys can be detected; not actual keys. For example, it is not possible to detect if a player presses SPACE, but you can detect if they press SPRINT (which can be mapped (assigned/binded) to ANY key (but is space by default))."}),(0,i.jsx)(n.p,{children:'As of update 0.3.7, the keys "A" and "D" are not recognized when in a vehicle. However, keys "W" and "S" can be detected with the "keys" parameter.'})]}),"\n",(0,i.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../resources/keys",children:"Keys"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);