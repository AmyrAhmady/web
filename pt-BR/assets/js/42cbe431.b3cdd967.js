"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([[6261],{28453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>s});var o=r(96540);const n={},t=o.createContext(n);function i(e){const a=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(t.Provider,{value:a},e.children)}},36454:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"scripting/callbacks/OnPlayerDeath","title":"OnPlayerDeath","description":"Esta callback \xe9 chamada quando um jogador morre, tanto por suic\xeddio ou por ser morto por outros jogadores.","source":"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/scripting/callbacks/OnPlayerDeath.md","sourceDirName":"scripting/callbacks","slug":"/scripting/callbacks/OnPlayerDeath","permalink":"/pt-BR/docs/scripting/callbacks/OnPlayerDeath","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/tree/master/frontend/docs/scripting/callbacks/OnPlayerDeath.md","tags":[{"inline":true,"label":"player","permalink":"/pt-BR/docs/tags/player"}],"version":"current","frontMatter":{"title":"OnPlayerDeath","sidebar_label":"OnPlayerDeath","description":"Esta callback \xe9 chamada quando um jogador morre, tanto por suic\xeddio ou por ser morto por outros jogadores.","tags":["player"]},"sidebar":"docsSidebar","previous":{"title":"OnPlayerConnect","permalink":"/pt-BR/docs/scripting/callbacks/OnPlayerConnect"},"next":{"title":"OnPlayerDisconnect","permalink":"/pt-BR/docs/scripting/callbacks/OnPlayerDisconnect"}}');var n=r(74848),t=r(28453);const i={title:"OnPlayerDeath",sidebar_label:"OnPlayerDeath",description:"Esta callback \xe9 chamada quando um jogador morre, tanto por suic\xeddio ou por ser morto por outros jogadores.",tags:["player"]},s=void 0,l={},d=[{value:"Descri\xe7\xe3o",id:"descri\xe7\xe3o",level:2},{value:"Retorno",id:"retorno",level:2},{value:"Exemplos",id:"exemplos",level:2},{value:"Notas",id:"notas",level:2},{value:"Related Functions",id:"related-functions",level:2}];function c(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"descri\xe7\xe3o",children:"Descri\xe7\xe3o"}),"\n",(0,n.jsx)(a.p,{children:"Esta callback \xe9 chamada quando um jogador morre, tanto por suic\xeddio ou por ser morto por outros jogadores."}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Nome"}),(0,n.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"playerid"}),(0,n.jsx)(a.td,{children:"O ID do jogador que morreu"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"killerid"}),(0,n.jsx)(a.td,{children:"O ID do jogador que matou o jogador que morreu, ou INVALID_PLAYER_ID se n\xe3o houve um."})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsxs)(a.td,{children:["WEAPON",":reason"]}),(0,n.jsx)(a.td,{children:"O ID do motivo da morte do jogador."})]})]})]}),"\n",(0,n.jsx)(a.h2,{id:"retorno",children:"Retorno"}),"\n",(0,n.jsx)(a.p,{children:"1 - Ir\xe1 previnir que outro filterscript receba esta callback."}),"\n",(0,n.jsx)(a.p,{children:"0 - Indica que esta callback ser\xe1 passada para o pr\xf3ximo filterscript."}),"\n",(0,n.jsx)(a.p,{children:"Sempre \xe9 chamada primeiro em filterscripts."}),"\n",(0,n.jsx)(a.h2,{id:"exemplos",children:"Exemplos"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-c",children:"new PlayerDeaths[MAX_PLAYERS];\nnew PlayerKills[MAX_PLAYERS];\n\npublic OnPlayerDeath(playerid, killerid, WEAPON:reason)\n{\n    SendDeathMessage(killerid, playerid, reason); // Mostra o kill no killfeed\n\n    // Verifica se o ID do jogador que matou \xe9 valido antes de fazer qualquer coisa\n    if (killerid\xa0!= INVALID_PLAYER_ID)\n    {\n        PlayerKills[killerid] ++;\n    }\n\n    // Fora da verifica\xe7\xe3o, fa\xe7a os c\xf3digos desejados para o jogador que morreu.\n    PlayerDeaths[playerid] ++;\n    return 1;\n}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"notas",children:"Notas"}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsx)(a.p,{children:"O motivo da morte retornar\xe1 37 (Lan\xe7a Chamas) para qualquer fonte que utilize fogo (EX: Molotov). O motivo da morte retornar\xe1 51 para qualquer fonte que utilize explos\xf5es (EX: RPG, granada). Voc\xea n\xe3o precisa verificar se o killerid \xe9 valido antes de usa-lo no SendDeathMessage. INVALID_PLAYER_ID \xe9 um par\xe2metro valido nesta fun\xe7\xe3o. playerid \xe9 o \xfanico que pode chamar esta callback."})}),"\n",(0,n.jsx)(a.admonition,{type:"warning",children:(0,n.jsx)(a.p,{children:"Voc\xea PRECISA verificar se 'killerid' \xe9 valido (n\xe3o INVALID_PLAYER_ID) antes de usa-lo em uma array (ou qualquer outro lugar), pois isso ir\xe1 ocasionar no crash do OnPlayerDeath (n\xe3o o script todo). Isto \xe9 devido ao INVALID_PLAYER_ID ser definido como 65535, e se uma array tem apenas 'MAX_PLAYERS' como defini\xe7\xe3o do n\xfamero de elementos, voc\xea estaria tentando acessar um index inv\xe1lido."})}),"\n",(0,n.jsx)(a.h2,{id:"related-functions",children:"Related Functions"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"../functions/SendDeathMessage",children:"SendDeathMessage"}),": Adiciona a kill para a lista de mortes."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"../functions/SetPlayerHealth",children:"SetPlayerHealth"}),": Define a vida de um jogador."]}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);